<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PCGuo</title>
  
  <subtitle>Wellcome</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gitee.com/pcguo999/"/>
  <updated>2020-03-23T11:29:39.296Z</updated>
  <id>https://gitee.com/pcguo999/</id>
  
  <author>
    <name>PCGuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git使用教程</title>
    <link href="https://gitee.com/pcguo999/2020/03/23/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://gitee.com/pcguo999/2020/03/23/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-03-23T10:45:50.235Z</published>
    <updated>2020-03-23T11:29:39.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h2><p>Git是目前世界上最先进的分布式版本控制系统，在处理各种项目时都十分高效，而且非常的高大上。</p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。而且集中式版本控制系统是必须联网才能工作。</p><p>Git是分布式版本控制系统，它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。</p><h2 id="二、Git安装（以下为Windows系统过程）"><a href="#二、Git安装（以下为Windows系统过程）" class="headerlink" title="二、Git安装（以下为Windows系统过程）"></a>二、Git安装（以下为Windows系统过程）</h2><h3 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1.安装软件"></a>1.安装软件</h3><p>打开<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>下载安装程序，然后按照默认选项安装即可。</p><p>安装完成后，可以在开始菜单里面找到</p><p>git：Git Bash、Git CMD、Git GUI</p><p>或者在桌面或文件夹中右键，也可以看到</p><p>Git GUI Here、Git Bash Here</p><p>/<strong>注意：</strong>其中GUI为用户界面模式，Bash为命令行模式，这里就以Bash为例子介绍git的基本使用方法（其实相比于GUI，个人觉得Bash更容易学习理解，一般也都是使用Bash）。</p><p>打开Git bash软件，弹出一个类似cmd的命令行窗口，证明安装成功。</p><h3 id="2-配置用户名和邮箱"><a href="#2-配置用户名和邮箱" class="headerlink" title="2.配置用户名和邮箱"></a>2.配置用户名和邮箱</h3><p>安装完成后，由于git是分布式管理工具，需要输入用户名和邮箱以作为标识，因此需要进行设置，在命令行输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><p>顾名思义，这是设置你的名字和Email地址。</p><p><strong>注意：</strong></p><p>git config  –<strong>global</strong>参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱，根据个人情况设置。</p><p>我们可以查看一下用户名和密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure><p>假如这里报错，证明Git的用户名和密码没有配置成功，我们还可以直接在用户主目录下找到 .git 文件夹，然后打开 config 文件，这是专门用来配置和读取相应的工作环境变量的，在里面加上如图所示内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">email = email@example.com</span><br><span class="line">name = Your Name</span><br></pre></td></tr></table></figure><h2 id="三、创建版本库"><a href="#三、创建版本库" class="headerlink" title="三、创建版本库"></a>三、创建版本库</h2><p>版本库(repository)也叫仓库，可以看做一个目录，这个目录里的所以文件都由Git进行管理，每个文件的修改、删除，Git都能跟踪。以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”</p><h3 id="1-创建空目录"><a href="#1-创建空目录" class="headerlink" title="1.创建空目录"></a>1.创建空目录</h3><p>选择一个合适的地方，创建一个空目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir images-bed //创建一个名叫images-bed的空目录</span><br><span class="line">$ <span class="built_in">cd</span> images-bed //把images-bed设置为当前目录</span><br><span class="line">$ <span class="built_in">pwd</span> //查看当前目录</span><br><span class="line">/d/hexo/images-bed</span><br></pre></td></tr></table></figure><p>也可以直接鼠标右键新建一个文件夹并重命名，进入这个文件夹鼠标右键选择Git Bash</p><p><strong>注意：</strong>Windows系统下，要保证目录名不包含中文。</p><h3 id="2-设置成仓库"><a href="#2-设置成仓库" class="headerlink" title="2.设置成仓库"></a>2.设置成仓库</h3><p>如果要添加文件到版本库，首先要把这个目录变成Git可以管理的仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> Initialized empty Git repository <span class="keyword">in</span> D:/hexo/images-bed/.git/</span><br></pre></td></tr></table></figure><p>这样Git就把仓库建好啦，我们可以看到在当前目录下多了一个.git 的目录，这个目录是Git来跟踪管理版本库的。</p><h2 id="四、把文件添加到版本库"><a href="#四、把文件添加到版本库" class="headerlink" title="四、把文件添加到版本库"></a>四、把文件添加到版本库</h2><p>我们在 images-bed 目录下编写一个 readme.txt 文件，内容如下：(内容可自定)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><h3 id="1-用-git-add-命令，将文件提交到暂存区："><a href="#1-用-git-add-命令，将文件提交到暂存区：" class="headerlink" title="1.用 git add 命令，将文件提交到暂存区："></a>1.用 git add 命令，将文件提交到暂存区：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>执行以上命令，没有任何显示。</p><h3 id="2-用-git-commit-m-命令，将暂存区文件提交到仓库（引号内为注释）："><a href="#2-用-git-commit-m-命令，将暂存区文件提交到仓库（引号内为注释）：" class="headerlink" title="2.用 git commit -m 命令，将暂存区文件提交到仓库（引号内为注释）："></a>2.用 git commit -m 命令，将暂存区文件提交到仓库（引号内为注释）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"wrote a readme file"</span> //-m后面输入的是本次提交的说明，可以输入任意内容。</span><br><span class="line">[master (root-commit) ec74440] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><h2 id="五、修改文件"><a href="#五、修改文件" class="headerlink" title="五、修改文件"></a>五、修改文件</h2><h3 id="1-修改文件内容"><a href="#1-修改文件内容" class="headerlink" title="1.修改文件内容"></a>1.修改文件内容</h3><p>我们已经成功添加并提交了一个 readme.txt 文件，继续修改 readme.txt 文件，改成如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一次使用Git</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><h3 id="2-运行-git-status-命令检查是否有未提交的文件"><a href="#2-运行-git-status-命令检查是否有未提交的文件" class="headerlink" title="2.运行 git status 命令检查是否有未提交的文件"></a>2.运行 git status 命令检查是否有未提交的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status //查看仓库当前的状态</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit: //没有文件将要被提交</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>上面的命令告诉我们，readme.txt 文件被修改过了，但还没有准备提交的修改。</p><h3 id="3-运行-git-diff-命令查看文件修改内容"><a href="#3-运行-git-diff-命令查看文件修改内容" class="headerlink" title="3.运行 git diff 命令查看文件修改内容"></a>3.运行 git diff 命令查看文件修改内容</h3><p>如果要检查文件修改了什么内容，可以通过上图中的命令来查看，发现文件的第二行增加了666666的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index d8036c1..1744b2a 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system. //这一句是被删掉的</span><br><span class="line">+第一次使用Git //这一句是新添加的</span><br><span class="line"> Git is free software.</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h3 id="4-检查无误后，继续提交修改后的文件，提交命令和上面一样。"><a href="#4-检查无误后，继续提交修改后的文件，提交命令和上面一样。" class="headerlink" title="4.检查无误后，继续提交修改后的文件，提交命令和上面一样。"></a>4.检查无误后，继续提交修改后的文件，提交命令和上面一样。</h3><h4 id="1-git-add"><a href="#1-git-add" class="headerlink" title="(1) git add"></a>(1) git add</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>没有任何输出，这时候可以用 <strong>git status</strong>查看一下当前仓库状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed: //将要被提交的文件包括 readme.txt</span><br><span class="line">  (use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure><h4 id="2-git-commit-m"><a href="#2-git-commit-m" class="headerlink" title="(2) git commit -m"></a>(2) git commit -m</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"add distributed"</span></span><br><span class="line">[master e318b5d] add distributed</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>再用 *<em>git status *</em>查看一下当前仓库状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean //当前没有需要提交的修改，而且，工作目录是干净的。</span><br></pre></td></tr></table></figure><h2 id="六、查看历史变更记录"><a href="#六、查看历史变更记录" class="headerlink" title="六、查看历史变更记录"></a>六、查看历史变更记录</h2><h3 id="1-使用-git-log-命令获得历史修改记录"><a href="#1-使用-git-log-命令获得历史修改记录" class="headerlink" title="1.使用 git log 命令获得历史修改记录"></a>1.使用 git log 命令获得历史修改记录</h3><p>如上图所示：每次提交都会有自己的版本号，当然，入过觉得这样看起来比较费事，可以使用命令，获得精简版本的日志记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit e318b5d28b037d02690912324ab6401d99e1b4e0 (HEAD -&gt; master)</span><br><span class="line">// commit为每次提交的版本号</span><br><span class="line">Author: PCGuo999 &lt;2470813832@qq.com&gt;</span><br><span class="line">Date:   Mon Mar 23 15:35:51 2020 +0800  // 每次提交的时间</span><br><span class="line">    add distributed  // 每次提交内容注释，也就是提交时引号中的注释</span><br><span class="line">    </span><br><span class="line">commit ec74440145b592bd379cfcc4a18220585f76f3cf</span><br><span class="line">Author: PCGuo999 &lt;2470813832@qq.com&gt;</span><br><span class="line">Date:   Mon Mar 23 15:23:18 2020 +0800</span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><h3 id="2-使用-git-log-–pretty-oneline-命令简化版本日志"><a href="#2-使用-git-log-–pretty-oneline-命令简化版本日志" class="headerlink" title="2.使用 git log –pretty=oneline 命令简化版本日志"></a>2.使用 git log –pretty=oneline 命令简化版本日志</h3><p>如1所示：每次提交都会有自己的版本号，如果觉得这样看起来比较麻烦，可以使用命令，获得精简版本的日志记录，使记录只显示主要的内容，一行显示（<strong>只显示版本号和提交的内容注释</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">e318b5d28b037d02690912324ab6401d99e1b4e0 (HEAD -&gt; master) add distributed</span><br><span class="line">ec74440145b592bd379cfcc4a18220585f76f3cf wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="七、版本回退"><a href="#七、版本回退" class="headerlink" title="七、版本回退"></a>七、版本回退</h2><h3 id="1-使用-git-reset-命令，将文件版本回退"><a href="#1-使用-git-reset-命令，将文件版本回退" class="headerlink" title="1.使用 git reset 命令，将文件版本回退"></a>1.使用 git reset 命令，将文件版本回退</h3><p>如果我们想把 readme.txt 文件退回到上一个版本，就可以使用 git reset 命令：</p><p><strong>注意：</strong>HEAD表示当前版本，则HEAD^表示上一个版本，那么上上版本就是HEAD^^，但是这样稍显麻烦，如果回退到100个版本之前，只需要执行这个命令即可：git reset –hard HEAD~100；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^ //HEAD表示当前版本，则HEAD^表示上一个版本，那么上上版本就是HEAD^^</span><br><span class="line">HEAD is now at ec74440 wrote a readme file // 当前版本已更新为 ec74440（版本编号）wrote a readme file（内容注释）</span><br></pre></td></tr></table></figure><h3 id="2-使用-cat-命令查看文件内容"><a href="#2-使用-cat-命令查看文件内容" class="headerlink" title="2.使用 cat 命令查看文件内容"></a>2.使用 cat 命令查看文件内容</h3><p>这时候用 cat 命令查看一下 readme.txt 的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt &#x2F;&#x2F;查看 readme.txt 文件的内容</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>果然 readme.txt 文件返回到了上一个版本。</p><h3 id="3-通过git-log查看修改记录"><a href="#3-通过git-log查看修改记录" class="headerlink" title="3.通过git log查看修改记录"></a>3.通过git log查看修改记录</h3><p>发现最近的一次内容的记录已经消失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit ec74440145b592bd379cfcc4a18220585f76f3cf (HEAD -&gt; master)</span><br><span class="line">Author: PCGuo999 &lt;2470813832@qq.com&gt;</span><br><span class="line">Date:   Mon Mar 23 15:23:18 2020 +0800</span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><h3 id="4-使用-git-reset-命令，回退到最新版本（刚才回退前的版本）"><a href="#4-使用-git-reset-命令，回退到最新版本（刚才回退前的版本）" class="headerlink" title="4.使用 git reset 命令，回退到最新版本（刚才回退前的版本）"></a>4.使用 git reset 命令，回退到最新版本（刚才回退前的版本）</h3><p>我们现在想要回到最新的版本，还是使用 git reset 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard e318b5d &#x2F;&#x2F;这里不能用HEAD而必须使用 commit id ，因为最新版本在之前返回时已经被删除了，1094a就是最新版本的 commit id，可以在之前的代码中查到</span><br><span class="line">HEAD is now at e318b5d add distributed</span><br></pre></td></tr></table></figure><h3 id="5-再查看一下-readme-txt-文件内容："><a href="#5-再查看一下-readme-txt-文件内容：" class="headerlink" title="5.再查看一下 readme.txt 文件内容："></a>5.再查看一下 readme.txt 文件内容：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">第一次使用Git</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>果然，又回到了最新的版本。</p><h2 id="八、工作区和暂存区"><a href="#八、工作区和暂存区" class="headerlink" title="八、工作区和暂存区"></a>八、工作区和暂存区</h2><p>工作区（Working Directory）</p><p>learngit 文件夹就是一个工作区。</p><p>版本库（Repository）</p><p>工作区有个隐藏目录 .git ，这个不算工作区，而是 Git 的版本库。</p><p>版本库里面的 index(stage) 文件叫暂存区，还有Git为我们自动创建的第一个分支 master ，以及指向 master 的一个指针叫做 HEAD。</p><p><img src="https://img-blog.csdn.net/20180603202659766" alt="img"></p><p>前面我们提到过，如果我们想把文件添加到Git里面时，需要分两步：</p><p>第一步是用 git add 把文件添加进去，实际上就是把文件修改添加到暂存区。</p><p>第二步是用 git commit 提交更改，实际上就是把暂存区的所有内容提交到当前分支。（我们现在只有唯一一个分支 master，所以现在就是往 master 分支上提交更改）</p><p>我们可以实践一下：</p><p>在 readme.txt 文件中加上一行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure><p>然后在工作区新建一个 LICENSE 文本文档（任意内容）</p><p>使用两次 git add 命令分别把 readme.txt 和 LICENSE 都添加后，可以用 git status 命令查看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line">    new file:   LICENSE</span><br><span class="line">    modified:   readme.txt</span><br></pre></td></tr></table></figure><p>现在，暂存区的状态就变成这样了：</p><p><img src="https://img-blog.csdn.net/20180603204003143" alt="img"></p><p>再使用 git commit 命令把暂存区的所有修改提交到分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"understand how stage works"</span></span><br><span class="line">[master e43a48b] understand how stage works</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure><p>这时候的工作区就是干净的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>这时候版本库就变成了这样：</p><p><img src="https://img-blog.csdn.net/20180603204522746" alt="img"></p><h2 id="九、管理修改"><a href="#九、管理修改" class="headerlink" title="九、管理修改"></a>九、管理修改</h2><p>Git 如此的优秀是因为，Git 跟踪并管理的不是文件，而是修改。</p><p>我们对 readme.txt 文件进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">第一次使用Git</span><br><span class="line">第二次使用Git</span><br><span class="line">第三次使用Git</span><br><span class="line">第四次使用Git</span><br><span class="line">第五次使用Git</span><br></pre></td></tr></table></figure><p>然后，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure><p>然后再修改 readme.txt 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt </span><br><span class="line">第一次使用Git</span><br><span class="line">第二次使用Git</span><br><span class="line">第三次使用Git</span><br><span class="line">第四次使用Git</span><br><span class="line">第五次使用Git</span><br><span class="line">第六次使用Git</span><br></pre></td></tr></table></figure><p>提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"git修改足迹"</span></span><br><span class="line">[master e8b7a7d] git修改足迹</span><br><span class="line"> 1 file changed, 4 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>这时候我们查看一下状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>我们可以发现，第二次修改并没有被提交。</p><p>因为在工作区的第一次修改被放入暂存区，准备提交；而在工作区的第二次修改并没有被放入暂存区，所以， git commit 命令只负责把暂存区的修改提交了。</p><p>提交后，我们可以用 git diff HEAD – readme.txt 命令去查看工作区和版本库里面最新版本的区别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD -- readme.txt</span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 653ab3d..61bc00c 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -2,4 +2,5 @@</span><br><span class="line"> 第二次使用Git</span><br><span class="line"> 第三次使用Git</span><br><span class="line"> 第四次使用Git</span><br><span class="line">-第五次使用Git</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+第五次使用Git</span><br><span class="line">+第六次使用Git</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h2 id="十、撤销修改"><a href="#十、撤销修改" class="headerlink" title="十、撤销修改"></a>十、撤销修改</h2><p>假如说你在 readme.txt 文件中添加了一行内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">第一次使用Git</span><br><span class="line">第二次使用Git</span><br><span class="line">第三次使用Git</span><br><span class="line">第四次使用Git</span><br><span class="line">第五次使用Git</span><br><span class="line">第六次使用Git</span><br></pre></td></tr></table></figure><p>最后一行不想看到的，应该怎么撤销呢？</p><h3 id="1-没有-git-add-之前，用-git-checkout-–-file-命令丢弃工作区的修改"><a href="#1-没有-git-add-之前，用-git-checkout-–-file-命令丢弃工作区的修改" class="headerlink" title="1.没有 git add 之前，用 git checkout – file 命令丢弃工作区的修改"></a>1.没有 git add 之前，用 git checkout – file 命令丢弃工作区的修改</h3><p>可以手动删除最后一行，手动把文件恢复到上一个版本的状态。然后再用 <strong>git checkout – file</strong> 命令丢弃工作区的修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt //把readme.txt文件在工作区的修改全部撤销。</span><br></pre></td></tr></table></figure><p>现在看一下 readme.txt 文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br></pre></td></tr></table></figure><p>果然复原了。</p><h3 id="2-有git-add但没git-commit，使用-git-reset-HEAD-file-命令把把暂存区的修改撤销掉"><a href="#2-有git-add但没git-commit，使用-git-reset-HEAD-file-命令把把暂存区的修改撤销掉" class="headerlink" title="2.有git add但没git commit，使用 git reset HEAD file 命令把把暂存区的修改撤销掉"></a>2.有git add但没git commit，使用 git reset HEAD file 命令把把暂存区的修改撤销掉</h3><p>这时候的修改添加到了暂存区，但<strong>没有提交到分支</strong>，用 git status 查看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line">    modified:   readme.txt</span><br></pre></td></tr></table></figure><p>这时候我们可以使用 *<em>git reset HEAD file *</em>命令把把暂存区的修改撤销掉，重新放回工作区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt //git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区，HEAD表示最新版本。</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">    readme.txt</span><br></pre></td></tr></table></figure><p>现在再用 git status 查看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">    modified:   readme.txt //暂存区是干净的，工作区有修改。</span><br></pre></td></tr></table></figure><p>这时候再丢弃工作区的修改就OK了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt //丢弃工作区的修改。</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>终于大功告成了。</p><h3 id="3-add、git-commit都有了之后，可以直接回退版本"><a href="#3-add、git-commit都有了之后，可以直接回退版本" class="headerlink" title="3.add、git commit都有了之后，可以直接回退版本"></a>3.add、git commit都有了之后，可以直接回退版本</h3><p>可以回退到上一个版本，见回退版本内容。</p><h2 id="十一、删除文件"><a href="#十一、删除文件" class="headerlink" title="十一、删除文件"></a>十一、删除文件</h2><p>在工作区即 images-bed 文件夹下新建一个 test.txt 文件，并添加和提交到Git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line">$ git commit -m <span class="string">"add test.txt"</span></span><br><span class="line">[master cbb43ea] add test.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure><h3 id="1-使用-rm-命令删除"><a href="#1-使用-rm-命令删除" class="headerlink" title="1.使用 rm 命令删除"></a>1.使用 rm 命令删除</h3><p>这时候可用 rm 命令删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p><strong>这时工作区和版本库就不一样了。</strong></p><h3 id="2-现在又分两种情况："><a href="#2-现在又分两种情况：" class="headerlink" title="2.现在又分两种情况："></a>2.现在又分两种情况：</h3><h4 id="1-确实要从版本库中删除该文件，那就用-git-rm-命令删除，并且-git-commit："><a href="#1-确实要从版本库中删除该文件，那就用-git-rm-命令删除，并且-git-commit：" class="headerlink" title="(1) 确实要从版本库中删除该文件，那就用 git rm 命令删除，并且 git commit："></a>(1) 确实要从版本库中删除该文件，那就用 git rm 命令删除，并且 git commit：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm <span class="string">'test.txt'</span></span><br><span class="line">$ git commit -m <span class="string">"remove test.txt"</span></span><br><span class="line">[master 2dde1e6] remove test.txt</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>这时候文件就从版本库被删除了。</p><h4 id="2-文件被删错了。因为版本库里有，所以很好恢复："><a href="#2-文件被删错了。因为版本库里有，所以很好恢复：" class="headerlink" title="(2) 文件被删错了。因为版本库里有，所以很好恢复："></a>(2) 文件被删错了。因为版本库里有，所以很好恢复：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt //用版本库里的版本替换工作区的版本。</span><br></pre></td></tr></table></figure><p>注意：如果已从版本库中删除了该文件，执行上面语句就会报错，因为已无法从版本库中回复改文件了</p><h2 id="十二、远程仓库准备工作"><a href="#十二、远程仓库准备工作" class="headerlink" title="十二、远程仓库准备工作"></a>十二、远程仓库准备工作</h2><p>在开始这部分之前，我们需要自行注册GitHub账号。而且，因为你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要设置：</p><h3 id="1-创建SSH-Key"><a href="#1-创建SSH-Key" class="headerlink" title="1.创建SSH Key"></a>1.创建SSH Key</h3><p>在 c:/Users/用户名/.ssh/ 文件夹下看看有没有.ssh 目录，如果有的话，看此目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果有，直接跳到下一步。如果没有，打开Git Bash，创建SSH</p><h4 id="（1）使用Git-Bash生成新的ssh-key。"><a href="#（1）使用Git-Bash生成新的ssh-key。" class="headerlink" title="（1）使用Git Bash生成新的ssh key。"></a>（1）使用Git Bash生成新的ssh key。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~  ///保证当前路径在”~”下</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"你的邮箱地址"</span>  ///建议填写自己真实有效的邮箱地址</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/用户名/.ssh/id_rsa):   ///不填直接回车</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):   ///输入密码（直接回车）</span><br><span class="line">Enter same passphrase again:   ///再次确认密码（直接回车）</span><br></pre></td></tr></table></figure><p>*本机已完成ssh key设置，其存放路径为：c:/Users/用户名/.ssh/下。</p><h4 id="（2）添加ssh-key到GItHub"><a href="#（2）添加ssh-key到GItHub" class="headerlink" title="（2）添加ssh key到GItHub"></a>（2）添加ssh key到GItHub</h4><p>登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH kyes→Add SSH key。</p><p>复制id_rsa.pub的公钥内容。 </p><p>1) 进入c:/Users/用户名/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。</p><p>2) Title自定义，将公钥粘贴到GitHub中Add an SSH key的key输入框，最后“Add Key”。</p><h4 id="（3）测试ssh-keys是否设置成功。"><a href="#（3）测试ssh-keys是否设置成功。" class="headerlink" title="（3）测试ssh keys是否设置成功。"></a>（3）测试ssh keys是否设置成功。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)? yes </span><br><span class="line">//确认你是否继续联系，输入yes</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/c/Users/用户名/.ssh/id_rsa'</span>:  </span><br><span class="line">//没有密码，直接回车</span><br><span class="line">Hi xxx! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h2 id="十三、添加与连接远程库"><a href="#十三、添加与连接远程库" class="headerlink" title="十三、添加与连接远程库"></a>十三、添加与连接远程库</h2><h3 id="1-添加远程库"><a href="#1-添加远程库" class="headerlink" title="1.添加远程库"></a>1.添加远程库</h3><p>现在我们已经在本地创建了一个Git仓库了，又想在GitHub上创建一个Git仓库，然后让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。那么我们应该怎么做呢？</p><p>（1）登陆GitHub</p><p>（2）在右上角找到“Create a new repo”按钮，创建一个新的仓库</p><p>（3）在Repository name填入自己想要设置的仓库名其他保持默认设置，点击<strong>Create repository</strong>按钮，就成功地创建了一个新的Git仓库</p><p>（4）已经把本地仓库的内容推送到了GitHub上，大家创建完以后应该是一个空的仓库。</p><h3 id="2-连接远程库"><a href="#2-连接远程库" class="headerlink" title="2.连接远程库"></a>2.连接远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/pcguo999/images-bed.git 这个地址在点击<span class="built_in">clone</span> or download，复制地址</span><br></pre></td></tr></table></figure><p>添加后，远程库的名字就是 origin ，这是Git默认的叫法。</p><p>然后，我们就可以把本地库的所有内容推送到远程库上（有时候会弹出窗口让你登录）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$  git push -u origin master</span><br><span class="line">Enumerating objects: 13, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (13/13), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (8/8), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (13/13), 1.08 KiB | 277.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 13 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/pcguo999/images-bed.git</span><br><span class="line"> + 24a4981...2dde1e6 master -&gt; master (forced update)</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure><p>使用 git push 命令，就是把当前分支 master 推送到远程。</p><p>因为远程库是空的，所以我们在第一次推送 master 分支时，要加上 -u 参数，Git不但会把本地的<code>master 分支内容推送的远程新的 master 分支，还会把本地的</code> master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>把本地 master 分支的最新修改推送至GitHub。现在，我们拥有了真正的分布式版本库。</p><h2 id="十四、从远程库克隆"><a href="#十四、从远程库克隆" class="headerlink" title="十四、从远程库克隆"></a>十四、从远程库克隆</h2><p>我们的学习过程是先有了本地库，后有了远程库，然后再对远程库进行关联。</p><p>其实，我们大部分时候是先创建远程库，然后再从远程库克隆。</p><h2 id="十五、简易的命令"><a href="#十五、简易的命令" class="headerlink" title="十五、简易的命令"></a>十五、简易的命令</h2><h3 id="1-Git-全局设置"><a href="#1-Git-全局设置" class="headerlink" title="1.Git 全局设置:"></a>1.Git 全局设置:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"pcguo999"</span></span><br><span class="line">git config --global user.email <span class="string">"2470813832@qq.com"</span></span><br></pre></td></tr></table></figure><h3 id="2-创建-git-仓库"><a href="#2-创建-git-仓库" class="headerlink" title="2.创建 git 仓库:"></a>2.创建 git 仓库:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir images-bed</span><br><span class="line"><span class="built_in">cd</span> images-bed</span><br><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://gitee.com/pcguo999/images-bed.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="3-已有仓库"><a href="#3-已有仓库" class="headerlink" title="3.已有仓库?"></a>3.已有仓库?</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_git_repo</span><br><span class="line">git remote add origin https://gitee.com/pcguo999/images-bed.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p> 1.输入“git add .”，将本地文件添加到仓库</p><p>2.输入“git commit -m”注释””，进行提交注释</p><p>3.输入“git push origin master”，将添加的文件推送到远程仓库，至此就已经将本地项目和远程仓库相连了。</p><p>4.开始在该文件夹中进行项目开发，每次提交，按照第1-3步骤顺序来即可！！！</p><h2 id="十六、Git常用操作"><a href="#十六、Git常用操作" class="headerlink" title="十六、Git常用操作"></a>十六、Git常用操作</h2><p>说明，以下整理来自廖雪峰大神的<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">《git教程》</a></p><h3 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h3><p>git config –global user.name ‘XXX’<br>git config –global user.email ‘XXX’</p><h3 id="2、创建本地库"><a href="#2、创建本地库" class="headerlink" title="2、创建本地库"></a>2、创建本地库</h3><p>mkidir learngit //自定义文件夹<br>cd learngit<br>touch test.md //创建test.md文件<br>pwd //显示当前目录</p><h3 id="3、常用CRT"><a href="#3、常用CRT" class="headerlink" title="3、常用CRT"></a>3、常用CRT</h3><p>git init //初始化代码仓库<br>git add learngit.txt                               //把所有要提交的文件修改放到暂存区<br>git commit -m ‘add a file’                      //把暂存区的所有内容提交到当前分支<br>git status                                            //查看工作区状态<br>git diff                                                //查看文件修改内容<br>git log                                                //查看提交历史<br>git log –pretty=oneline                       //单行显示<br>git reset –hard HEAD^　  //回退到上一个版本，其中（HEAD^^(上上版本),HEAD~100(往上100个版本)）<br>commit id                                          //(版本号) 可回到指定版本<br>git reflog                                           //查看历史命令</p><p>其中说明【<br>工作区（Working Directory）<br>版本库（Repository） #.git<br>stage(index) 暂存区<br>master Git自动创建的分支<br>HEAD 指针】</p><p>git diff HEAD – <file>                                  //查看工作区和版本库里最新版本的区别<br>git checkout – <file>                                   //用版本库的版本替换工作区的版本，无论是工作区的修改还是删除，都可以’一键还原’<br>git reset HEAD <file>                                   //把暂存区的修改撤销掉，重新放回工作区。<br>git rm &lt; file &gt;                                          //删除文件，若文件已提交到版本库，不用担心误删，但是只能恢复文件到最新版本</p><h3 id="4、创建SSH-Key，建立本地Git仓库和GitHub仓库之间的传输的秘钥"><a href="#4、创建SSH-Key，建立本地Git仓库和GitHub仓库之间的传输的秘钥" class="headerlink" title="4、创建SSH Key，建立本地Git仓库和GitHub仓库之间的传输的秘钥"></a>4、创建SSH Key，建立本地Git仓库和GitHub仓库之间的传输的秘钥</h3><p>ssh-keygen -t rsa -C ‘your email’                                                    //创建SSH Key<br>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:username/repostery.git          //关联本地仓库，远程库的名字为origin<br>//第一次把当前分支master推送到远程，-u参数不但推送，而且将本地的分支和远程的分支关联起来<br>git push -u origin master<br>git push origin master                               //把当前分支master推送到远程<br>git clone <a href="mailto:git@github.com">git@github.com</a>:username/repostery.git                            //从远程库克隆一个到本地库</p><h3 id="5、分支"><a href="#5、分支" class="headerlink" title="5、分支"></a>5、分支</h3><p>git checkout -b dev                                   //创建并切换分支<br>#相当于git branch dev 和git checkout dev<br>git branch                                                //查看当前分支，当前分支前有个*号<br>git branch <name>                                   //创建分支<br>git checkout <name>                                //切换分支<br>git merge <name>                                   //合并某个分支到当前分支<br>git branch -d <name>                               //删除分支<br>git log –graph                                          //查看分支合并图<br>git merge –no-ff -m ‘message’ dev            //禁用Fast forward合并dev分支<br>git stash                                                 //隐藏当前工作现场，等恢复后继续工作<br>git stash list                                            //查看stash记录<br>git stash apply                                         //仅恢复现场，不删除stash内容<br>git stash drop                                          //删除stash内容<br>git stash pop                                           //恢复现场的同时删除stash内容<br>git branch -D <name>                              //强行删除某个未合并的分支<br>//开发新feature最好新建一个分支<br>git remote                                               //查看远程仓库<br>git remote -v                                           //查看远程库详细信息<br>git pull                                                   //抓取远程提交<br>git checkout -b branch-name origin/branch-name                  //在本地创建和远程分支对应的分支<br>git branch –set-upstream branch-name origin/branch-name   //建立本地分支和远程分支的关联</p><h3 id="6、其他—标签"><a href="#6、其他—标签" class="headerlink" title="6、其他—标签"></a>6、其他—标签</h3><p>git tag v1.0                                                                      //给当前分支最新的commit打标签<br>git tag -a v0.1 -m ‘version 0.1 released’ 3628164                 //-a指定标签名，-m指定说明文字<br>git tag -s <tagname> -m ‘blabla’                                        //可以用PGP签名标签<br>git tag                                                                             //查看所有标签<br>git show v1.0                                                                   //查看标签信息<br>git tag -d v0.1                                                                 //删除标签<br>git push origin <tagname>                                               //推送某个标签到远程<br>git push origin –tags                                                       //推送所有尚未推送的本地标签</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Git简介&quot;&gt;&lt;a href=&quot;#一、Git简介&quot; class=&quot;headerlink&quot; title=&quot;一、Git简介&quot;&gt;&lt;/a&gt;一、Git简介&lt;/h2&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统，在处理各种项目时都十分高效，而且非常的高大上。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Git" scheme="https://gitee.com/pcguo999/categories/Git/"/>
    
    
      <category term="Git" scheme="https://gitee.com/pcguo999/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://gitee.com/pcguo999/2020/03/23/Python%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/"/>
    <id>https://gitee.com/pcguo999/2020/03/23/Python%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/</id>
    <published>2020-03-23T01:07:00.000Z</published>
    <updated>2020-03-23T11:17:04.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人生苦短，我用Python"><a href="#人生苦短，我用Python" class="headerlink" title="人生苦短，我用Python"></a>人生苦短，我用Python</h1><p>点击 -&gt; 进入<a href="http://pcguo999.gitee.io/python" target="_blank" rel="noopener">Python</a>,开始你的学习之旅</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;人生苦短，我用Python&quot;&gt;&lt;a href=&quot;#人生苦短，我用Python&quot; class=&quot;headerlink&quot; title=&quot;人生苦短，我用Python&quot;&gt;&lt;/a&gt;人生苦短，我用Python&lt;/h1&gt;&lt;p&gt;点击 -&amp;gt; 进入&lt;a href=&quot;http:/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://gitee.com/pcguo999/categories/Python/"/>
    
    
      <category term="Python" scheme="https://gitee.com/pcguo999/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>利用码云搭建图床</title>
    <link href="https://gitee.com/pcguo999/2020/03/22/%E5%88%A9%E7%94%A8%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <id>https://gitee.com/pcguo999/2020/03/22/%E5%88%A9%E7%94%A8%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-03-22T01:20:00.000Z</published>
    <updated>2020-03-23T11:27:10.443Z</updated>
    
    <content type="html"><![CDATA[<p>图床一般是指储存图片的服务器。因为自建博客需要图片服务器,考虑到用本机的图片服务器需要考虑数据备份链接路径等一系列问题,还是推荐使用第三方的服务。这里讲解的是用Gitee搭建图床，从而让博客添加图片。</p><h2 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h2><ol><li><p>需要一个码云账户（没有的注册一个）</p></li><li><p>新建一个仓库，配置SSH码</p></li><li><p>本地安装Git，用来提交本地代码到远程仓库</p><p>具体可跳转至<a href="https://pcguo999.gitee.io/2020/03/22/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E7%A0%81%E4%BA%91/" target="_blank" rel="noopener">Hexo搭建博客</a></p></li></ol><h2 id="二、方式一-新建文件方式上传"><a href="#二、方式一-新建文件方式上传" class="headerlink" title="二、方式一 新建文件方式上传"></a>二、方式一 新建文件方式上传</h2><p>在码云上搭建一个空的远程仓库,然后建一个文件夹</p><p>注意：不要轻易修改仓库的名字和文件夹的名字</p><p>然后点击上传文件,进入上传页面,上传一张图片,这个就是我们以后会使用的图床界面</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/gitee-images-bed/1.png" alt=""></p><p>其实这个时候可以使用码云库的链接访问了,如果你的库是<code>public</code>的</p><p>你的链接类似这样<code>https://gitee.com/iMist/res/raw/master/images-bed/img_gitee_pages.png</code></p><blockquote><p>注意：图片链接需要将<code>blob</code>替换成<code>raw</code>,才是图片的永久链接</p></blockquote><h2 id="方式二、利用git-连接gitee上传项目"><a href="#方式二、利用git-连接gitee上传项目" class="headerlink" title="方式二、利用git 连接gitee上传项目"></a>方式二、利用git 连接gitee上传项目</h2><p>将所需要的图片直接放在工程中，然后通过git命令上传到gitee</p><p>具体操作请看<a href="">Git使用教程</a></p><p>然后和第一步链接方式一样</p><p>你的链接类似这样<code>https://gitee.com/iMist/res/raw/master/images-bed/img_gitee_pages.png</code></p><p>这种方法比第一种方法上传文件方便，可以快速将很多文件上传至gitee</p><h2 id="方式三-利用码云提供的Gitee-Pages搭建静态页面服务"><a href="#方式三-利用码云提供的Gitee-Pages搭建静态页面服务" class="headerlink" title="方式三:利用码云提供的Gitee Pages搭建静态页面服务"></a>方式三:利用码云提供的Gitee Pages搭建静态页面服务</h2><p>这个可以用来搭建静态博客<code>hexo</code>等,但是我们是要来搭建图床的</p><p>可以自己写前端，也可以直接去网上下载模板，将html、css、js等文件放入工程中</p><p>然后将图片放入images文件中</p><p>点击<code>Gitee Pages</code>,将当前分支一般是master分支作为部署的分支,选择根目录（不填就行了代表整个仓库）,然后点击启动就开始部署了</p><p>部署完成就可以访问之前上传的测试图片,地址像这样<code>https://imist.gitee.io/res/images-bed/img_gitee_pages.png</code></p><p>保留上传链接作为快捷图床服务</p><p><code>https://gitee.com/iMist/res/upload/master/images-bed</code><br>以后就可以快速打开图床了,接口测试工据测试一下,缓存生效了,速度很快,适合静态资源的保存</p><p>也可以通过部署网站，访问图床网页</p><p><code>http://pcguo999.gitee.io/images-bed</code></p><p>这种方式的缺点是每次都要重新部署一下服务才能访问图片,要掏钱才能推送立刻部署，但是可以通过网址查看图床页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图床一般是指储存图片的服务器。因为自建博客需要图片服务器,考虑到用本机的图片服务器需要考虑数据备份链接路径等一系列问题,还是推荐使用第三方的服务。这里讲解的是用Gitee搭建图床，从而让博客添加图片。&lt;/p&gt;
&lt;h2 id=&quot;一、配置环境&quot;&gt;&lt;a href=&quot;#一、配置环境
      
    
    </summary>
    
    
      <category term="Gitee" scheme="https://gitee.com/pcguo999/categories/Gitee/"/>
    
    
      <category term="Hexo" scheme="https://gitee.com/pcguo999/tags/Hexo/"/>
    
      <category term="Gitee" scheme="https://gitee.com/pcguo999/tags/Gitee/"/>
    
      <category term="Git" scheme="https://gitee.com/pcguo999/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客-码云</title>
    <link href="https://gitee.com/pcguo999/2020/03/22/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E7%A0%81%E4%BA%91/"/>
    <id>https://gitee.com/pcguo999/2020/03/22/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E7%A0%81%E4%BA%91/</id>
    <published>2020-03-22T01:07:00.000Z</published>
    <updated>2020-03-23T11:16:23.503Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pcguo999.gitee.io/2020/03/22/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E7%A0%81%E4%BA%91/" target="_blank" rel="noopener">一、配置环境与搭建博客</a></p><p><a href="https://pcguo999.gitee.io/2020/03/21/Hexo%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">二、Hexo相关配置和使用</a></p><p><a href="https://pcguo999.gitee.io/2020/03/22/%E5%88%A9%E7%94%A8%E7%A0%81%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/" target="_blank" rel="noopener">三、利用码云搭建图床</a></p><h2 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h2><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1.安装 Node.js"></a>1.安装 Node.js</h3><p>Node官方网站：<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p><p>Node 是一个让 JavaScript 运行在<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316" target="_blank" rel="noopener">服务端</a>的开发平台，它让 JavaScript 成为与<a href="https://baike.baidu.com/item/PHP/9337" target="_blank" rel="noopener">PHP</a>、<a href="https://baike.baidu.com/item/Python/407313" target="_blank" rel="noopener">Python</a>、<a href="https://baike.baidu.com/item/Perl/851577" target="_blank" rel="noopener">Perl</a>、<a href="https://baike.baidu.com/item/Ruby/11419" target="_blank" rel="noopener">Ruby</a> 等服务端语言平起平坐的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/1379708" target="_blank" rel="noopener">脚本语言</a>。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1.png" alt=""></p><p>安装步骤非常简单，一直next就可以了，默认安装就行。如果需要改路径的可以自己改路径</p><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2.安装 Git"></a>2.安装 Git</h3><p>Git官方网站：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p><p>选择自己需要的系统版本</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.png" alt=""><br><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.png" alt=""></p><p>安装步骤非常简单，一直next就可以了，默认安装就行。如果需要改路径的可以自己改路径<br>安装完成，可以在开始菜单可以看到</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.png" alt=""></p><blockquote><p>tips：这个Git Bash相当于window中的终端窗口，以后我们就用这个打开终端。</p></blockquote><h3 id="3-查看-node，npm是否安装成功，并安装cnpm"><a href="#3-查看-node，npm是否安装成功，并安装cnpm" class="headerlink" title="3.查看 node，npm是否安装成功，并安装cnpm"></a>3.查看 node，npm是否安装成功，并安装cnpm</h3><p>新建一个文件夹，比如我这里建了 PCGuoblog</p><p>在<strong>这个文件夹</strong>内空白处鼠标的右键，选择 Git Bash Here（之后的操作都是在这个里面）</p><p>查看 node，npm是否安装成功，没有成功的就重新安装node。</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.png" alt=""></p><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h4><p>我们需要先来安装个cnpm提高速度，以后下载都cnpm</p><p>在Git Bash输入下载cnpm<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/6.png" alt=""></p><h5 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a><strong>扩展：</strong></h5><h6 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h6><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用</li></ul><h6 id="npm命令"><a href="#npm命令" class="headerlink" title="npm命令"></a>npm命令</h6><ul><li><code>npm -v</code> 来测试是否成功安装</li><li>查看当前目录已安装插件：<code>npm list</code> </li><li>更新全部插件： <code>npm update [ --save-dev ]</code> </li><li>使用 npm 更新对应插件： <code>npm update &lt;name&gt; [ -g ] [ --save-dev]</code> </li><li>使用 npm 卸载插件： <code>npm uninstall &lt;name&gt; [ -g ] [ --save-dev ]</code></li></ul><h6 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h6><ul><li><p>淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p></li><li><p>安装：命令提示符执行<br> <code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code> </p></li><li><p><code>cnpm -v</code> 来测试是否成功安装</p></li></ul><h3 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4.安装hexo"></a>4.安装hexo</h3><p><code>cnpm install -g hexo-cli</code></p><p>验证是否安装成功<br><code>hexo -v</code><br>显示信息提示成功</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/7.png" alt=""></p><h2 id="二、博客搭建"><a href="#二、博客搭建" class="headerlink" title="二、博客搭建"></a>二、博客搭建</h2><h3 id="1-搭建项目"><a href="#1-搭建项目" class="headerlink" title="1.搭建项目"></a>1.搭建项目</h3><p>运行命令<code>hexo init</code>，建立整个项目</p><p><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/8.png" alt=""></p><p>执行成功，文件夹中会自动生成项目文件</p><p>public  ：公共文件夹，这个文件夹用于存放生成的站点文件。</p><p>source  ：资源文件夹，这个文件夹用来存放内容。</p><p>themes ：主题文件夹，下载的主题都放在这个文件夹里面</p><h3 id="2-运行测试"><a href="#2-运行测试" class="headerlink" title="2..运行测试"></a>2..运行测试</h3><p>这里我们经常用到的有三个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #用来清理缓存文件</span><br><span class="line">hexo g      #生成文件</span><br><span class="line">hexo s     #运行本地服务器</span><br><span class="line">hexo d   #上传到服务器</span><br></pre></td></tr></table></figure><p>注意：执行 hexo d  命令时，若出现 ERROR Deployer not found: git</p><p>执行以下命令下载<code>hexo-deployer-git</code>插件</p><p>npm install <code>--</code>save hexo-deployer-git</p><p>我们运行<br><code>hexo s</code><br>出现：</p><p>INFO  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p><p>打开浏览器，输入<code>localhost:4000</code>,就可以在本地看到博客了<br><img src="https://gitee.com/pcguo999/images-bed/raw/master/blog-images/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/9.png" alt=""></p><h3 id="3-使用域名访问Hexo"><a href="#3-使用域名访问Hexo" class="headerlink" title="3.使用域名访问Hexo"></a>3.使用域名访问Hexo</h3><hr><p><strong>购买个人域名</strong><br> 可以选择在万网或者godady上购买域名。各有利弊。不过考虑到只是用来做个人网站的域名，为了方便建议在万网购买。</p><p><strong>解析域名</strong><br> 域名服务商都会提供相关解析服务，域名解析配置均相同</p><p>参数配置</p><p><strong>绑定独立域名</strong><br> 进入source（博客文件夹下）文件夹，创建名为CNAME的文件</p><p> 运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>万事OK，快试试用你的独立域名访问Hexo吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pcguo999.gitee.io/2020/03/22/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E7%A0%81%E4%BA%91/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://gitee.com/pcguo999/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://gitee.com/pcguo999/tags/Hexo/"/>
    
      <category term="Gitee" scheme="https://gitee.com/pcguo999/tags/Gitee/"/>
    
  </entry>
  
  <entry>
    <title>Hexo相关配置和使用</title>
    <link href="https://gitee.com/pcguo999/2020/03/21/Hexo%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://gitee.com/pcguo999/2020/03/21/Hexo%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-21T13:07:00.000Z</published>
    <updated>2020-03-22T05:26:21.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、配置-config-yml文件"><a href="#一、配置-config-yml文件" class="headerlink" title="一、配置_config.yml文件"></a>一、配置_config.yml文件</h2><p>这个文件配置了所写博客里面的内容，这里说明了每个配置的作用</p><h3 id="1-站点配置"><a href="#1-站点配置" class="headerlink" title="1.站点配置"></a>1.站点配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment"># 网站描述(SEO)</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># 您的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="comment"># 网站使用的语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="comment"># 网站时区</span></span><br></pre></td></tr></table></figure><h3 id="2-URL配置"><a href="#2-URL配置" class="headerlink" title="2.URL配置"></a>2.URL配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## 如果你的网站放在子目录中，请将url设置为为'http://yoursite.com/child'，将根目录root设置为'/child/'</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://gitee.com/pcguo999/</span>   <span class="comment">#网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment"># 网站根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> <span class="comment"># 文章的永久链接</span></span><br><span class="line"><span class="attr">permalink_defaults:</span> <span class="comment"># 永久链接中各部分的默认值</span></span><br></pre></td></tr></table></figure><h3 id="3-目录配置"><a href="#3-目录配置" class="headerlink" title="3.目录配置"></a>3.目录配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>  <span class="string">//资源文件夹，这个文件夹用来存放内容。默认值：source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>  <span class="string">//公共文件夹，这个文件夹用于存放生成的站点文件。默认值：public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>  <span class="string">//标签文件夹</span> <span class="string">默认值：tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>  <span class="string">//归档文件夹</span> <span class="string">默认值：archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>  <span class="string">//分类文件夹</span>  <span class="string">默认值：categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>  <span class="string">//Include</span> <span class="string">code</span> <span class="string">文件夹</span> <span class="string">默认值：downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>  <span class="string">//国际化（i18n）文件夹</span> <span class="string">默认值：:lang</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="comment">#  //跳过指定文件的渲染，您可使用glob表达式来匹配路径。</span></span><br></pre></td></tr></table></figure><h3 id="4-文章配置"><a href="#4-文章配置" class="headerlink" title="4.文章配置"></a>4.文章配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment"># 预设布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># 将标题转换为title case</span></span><br><span class="line"><span class="attr">external_link:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 在新标签中打开外部链接</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># 适用于整个站点</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment"># 显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment"># 启动asset文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment"># 把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment"># 显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span> <span class="comment"># 代码块的设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启动设置</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment"># 行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span> <span class="comment"># 自动检测</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="comment"># tab替换</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="5-主页设置"><a href="#5-主页设置" class="headerlink" title="5.主页设置"></a>5.主页设置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主页设置</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (默认 = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = 关闭分页功能)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (默认情况下按日期降序排序)</span></span><br><span class="line"><span class="attr">index_generator:</span> <span class="comment"># 索引生成</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span> <span class="comment"># 路径</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span> <span class="comment"># 每页展示文章数</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span> <span class="comment"># 排序依据</span></span><br></pre></td></tr></table></figure><h3 id="6-分类-amp-标签"><a href="#6-分类-amp-标签" class="headerlink" title="6.分类 &amp; 标签"></a>6.分类 &amp; 标签</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认分类</span></span><br><span class="line"><span class="attr">category_map:</span> <span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签别名</span></span><br></pre></td></tr></table></figure><h3 id="7-扩展-插件、主题"><a href="#7-扩展-插件、主题" class="headerlink" title="7.扩展-插件、主题"></a>7.扩展-插件、主题</h3><p>更换主题：下载主题后直接解压在themes文件夹中，然后修改theme的值，即可配置成功。配置成功后，在Git Bash Here执行 hexo clean 命令清除一下缓冲</p><p>插件：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a><br>主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">切换主题可以修改theme的值</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">matery</span> <span class="comment"># 当前主题名称。值为false时禁用主题</span></span><br></pre></td></tr></table></figure><h3 id="8-Git部署配置"><a href="#8-Git部署配置" class="headerlink" title="8.Git部署配置"></a>8.Git部署配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  <span class="comment">#填git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://gitee.com/pcguo999/pcguo999.git</span>   <span class="comment">#SSH地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  <span class="comment">#分支</span></span><br></pre></td></tr></table></figure><h2 id="二、Hexo命令"><a href="#二、Hexo命令" class="headerlink" title="二、Hexo命令"></a>二、Hexo命令</h2><h3 id="1-初始化文件夹网站"><a href="#1-初始化文件夹网站" class="headerlink" title="1.初始化文件夹网站"></a>1.初始化文件夹网站</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//Hexo</span> <span class="string">默认在目前的文件夹建立网站</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">init</span></span><br><span class="line"></span><br><span class="line"><span class="string">//指定文件夹</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">init</span> <span class="string">[folder]</span></span><br></pre></td></tr></table></figure><h3 id="2-新建一篇文章"><a href="#2-新建一篇文章" class="headerlink" title="2.新建一篇文章"></a>2.新建一篇文章</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">"my blog"</span></span><br></pre></td></tr></table></figure><h3 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3.生成静态文件"></a>3.生成静态文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="string">//简写</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="string">选项</span>  <span class="string">描述</span></span><br><span class="line"><span class="string">-d,</span> <span class="string">--deploy</span>    <span class="string">文件生成后立即部署网站</span></span><br><span class="line"><span class="string">-w,</span> <span class="string">--watch</span> <span class="string">监视文件变动</span></span><br></pre></td></tr></table></figure><h3 id="4-发表草稿"><a href="#4-发表草稿" class="headerlink" title="4.发表草稿"></a>4.发表草稿</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">publish</span> <span class="string">[layout]</span> <span class="string">&lt;filename&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-启动服务器。"><a href="#5-启动服务器。" class="headerlink" title="5.启动服务器。"></a>5.启动服务器。</h3><p>默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">server</span></span><br><span class="line"></span><br><span class="line"><span class="string">//简写</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="string">选项</span>  <span class="string">描述</span></span><br><span class="line"><span class="string">-p,</span> <span class="string">--port</span>  <span class="string">重设端口</span></span><br><span class="line"><span class="string">-s,</span> <span class="string">--static</span>    <span class="string">只使用静态文件</span></span><br><span class="line"><span class="string">-l,</span> <span class="string">--log</span>   <span class="string">启动日记记录，使用覆盖记录格式</span></span><br></pre></td></tr></table></figure><h3 id="6-部署网站"><a href="#6-部署网站" class="headerlink" title="6.部署网站"></a>6.部署网站</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="string">//简写</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h3 id="7-查看hexo版本"><a href="#7-查看hexo版本" class="headerlink" title="7.查看hexo版本"></a>7.查看hexo版本</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">version</span></span><br><span class="line"></span><br><span class="line"><span class="string">//简写</span> </span><br><span class="line"><span class="string">hexo</span> <span class="string">v</span></span><br></pre></td></tr></table></figure><h3 id="8-新建页面"><a href="#8-新建页面" class="headerlink" title="8.新建页面"></a>8.新建页面</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//比如说新建标签页面，执行命令之后会在根目录source文件夹下创建tags文件夹</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><h2 id="三、Hexo插件安装"><a href="#三、Hexo插件安装" class="headerlink" title="三、Hexo插件安装"></a>三、Hexo插件安装</h2><ul><li>Hexo安装Git插件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span> <span class="string">hexo-deployer-git</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、配置-config-yml文件&quot;&gt;&lt;a href=&quot;#一、配置-config-yml文件&quot; class=&quot;headerlink&quot; title=&quot;一、配置_config.yml文件&quot;&gt;&lt;/a&gt;一、配置_config.yml文件&lt;/h2&gt;&lt;p&gt;这个文件配置了所写博
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://gitee.com/pcguo999/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://gitee.com/pcguo999/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown高级技巧</title>
    <link href="https://gitee.com/pcguo999/2020/03/21/Markdown%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <id>https://gitee.com/pcguo999/2020/03/21/Markdown%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</id>
    <published>2020-03-21T10:07:00.000Z</published>
    <updated>2020-03-23T02:29:28.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、支持HTML元素"><a href="#一、支持HTML元素" class="headerlink" title="一、支持HTML元素"></a>一、支持HTML元素</h2><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 </p><p>比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>C<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 复制</span><br></pre></td></tr></table></figure><h2 id="二、转义字符"><a href="#二、转义字符" class="headerlink" title="二、转义字符"></a>二、转义字符</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><h2 id="三、公式"><a href="#三、公式" class="headerlink" title="三、公式"></a>三、公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;<span class="emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="四、流程图"><a href="#四、流程图" class="headerlink" title="四、流程图"></a>四、流程图</h2><h3 id="1、横向流程图源码格式："><a href="#1、横向流程图源码格式：" class="headerlink" title="1、横向流程图源码格式："></a>1、横向流程图源码格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2、竖向流程图源码格式：</span><br></pre></td></tr></table></figure><p>​<code>mermaidgraph TDA[方形] --&gt; B(圆角)    B --&gt; C{条件a}    C --&gt; |a=1| D[结果1]    C --&gt; |a=2| E[结果2]    F[竖向流程图]​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3、标准流程图源码格式：</span><br></pre></td></tr></table></figure><p>​<code>flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st-&gt;op-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4、标准流程图源码格式（横向）：</span><br></pre></td></tr></table></figure><p>​<code>flowst=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 5、UML时序图源码样例：</span><br></pre></td></tr></table></figure><p>​<code>sequence对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 6、UML时序图源码复杂样例：</span><br></pre></td></tr></table></figure><p>​<code>sequenceTitle: 标题：复杂使用对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象B-&gt;小三: 你好吗小三--&gt;&gt;对象A: 对象B找我了对象A-&gt;对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 7、UML标准时序图样例：</span><br></pre></td></tr></table></figure><p>​<code>mermaid%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 8、甘特图样例：</span><br></pre></td></tr></table></figure><p>​<code>mermaid%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h​</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 五、插入视频、音乐</span><br><span class="line">插入视频：</span><br><span class="line">&#96;&#96;&#96;markdown</span><br><span class="line">&lt;video id&#x3D;&quot;video&quot; controls&#x3D;&quot;&quot; preload&#x3D;&quot;none&quot; poster&#x3D;&quot;视频图片地址&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;source id&#x3D;&quot;mp4&quot; src&#x3D;&quot;视频地址&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure><p>插入音频</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">preload</span>=<span class="string">"none"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp3"</span> <span class="attr">src</span>=<span class="string">"音乐地址"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、支持HTML元素&quot;&gt;&lt;a href=&quot;#一、支持HTML元素&quot; class=&quot;headerlink&quot; title=&quot;一、支持HTML元素&quot;&gt;&lt;/a&gt;一、支持HTML元素&lt;/h2&gt;&lt;p&gt;不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://gitee.com/pcguo999/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://gitee.com/pcguo999/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="https://gitee.com/pcguo999/2020/03/20/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://gitee.com/pcguo999/2020/03/20/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-03-20T08:40:00.000Z</published>
    <updated>2020-03-23T02:29:25.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href="https://baike.baidu.com/item/WordPress" target="_blank" rel="noopener">WordPress</a>和大型CMS如<a href="https://baike.baidu.com/item/Joomla" target="_blank" rel="noopener">Joomla</a>、<a href="https://baike.baidu.com/item/Drupal" target="_blank" rel="noopener">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href="https://baike.baidu.com/item/Ghost/17013737" target="_blank" rel="noopener">Ghost</a>和<a href="https://baike.baidu.com/item/Typecho" target="_blank" rel="noopener">Typecho</a>。</p><p>用于编写说明文档，并且以“README.md”的文件名保存在软件的目录下面。</p><p>除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。</p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1-使用-和-标记一级标题和二级标题"><a href="#1-使用-和-标记一级标题和二级标题" class="headerlink" title="1.使用 = 和 - 标记一级标题和二级标题"></a>1.使用 = 和 - 标记一级标题和二级标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是一级标题</span><br><span class="line">===========</span><br><span class="line">我是二级标题</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><h3 id="2-使用-表示1-6级标题，-的个数代表是几级标题"><a href="#2-使用-表示1-6级标题，-的个数代表是几级标题" class="headerlink" title="2.使用 # 表示1-6级标题，#的个数代表是几级标题"></a>2.使用 # 表示1-6级标题，#的个数代表是几级标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><h3 id="1-加粗"><a href="#1-加粗" class="headerlink" title="1.加粗"></a>1.加粗</h3><p>要加粗的文字左右分别用两个*号包起来</p><p><strong>加粗</strong></p><h3 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2.斜体"></a>2.斜体</h3><p>要倾斜的文字左右分别用一个*号包起来</p><p><em>斜体</em></p><h3 id="3-斜体加粗"><a href="#3-斜体加粗" class="headerlink" title="3.斜体加粗"></a>3.斜体加粗</h3><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><p><strong><em>斜体加粗</em></strong></p><h3 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.删除线</h3><p>要加删除线的文字左右分别用两个~~号包起来</p><p><del>删除</del></p><h3 id="5-下划线"><a href="#5-下划线" class="headerlink" title="5.下划线"></a>5.下划线</h3><p>下划线可以通过 HTML 的 &lt; u &gt; &lt; /u &gt;标签来实现：</p><p>一般文本建议不要加下划线，容易误会成链接</p><p><u>下划线</u></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">***斜体加粗**</span>*</span><br><span class="line">~~删除~~</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="三、段落"><a href="#三、段落" class="headerlink" title="三、段落"></a>三、段落</h2><h3 id="1-分隔线"><a href="#1-分隔线" class="headerlink" title="1.分隔线"></a>1.分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><hr><hr><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span>*</span><br><span class="line">------</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><h3 id="2-脚注"><a href="#2-脚注" class="headerlink" title="2.脚注"></a>2.脚注</h3><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^PCGuo999]。（鼠标悬浮在PCGuo999上）</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^PCGuo999</span>]:<span class="link">一个为梦想奋斗的人</span></span><br></pre></td></tr></table></figure><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h3><p>在段落前使用 <strong>&gt;</strong> 符号，然后加一个空格</p><blockquote><p>引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用</span></span><br><span class="line"><span class="quote">&gt; &gt; 嵌套引用</span></span><br></pre></td></tr></table></figure><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1.有序列表"></a>1.有序列表</h3><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><pre><code>1.有序12.有序2</code></pre><h3 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表</h3><p>无序列表使用星号(<strong>***)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一项</span><br><span class="line"><span class="bullet">* </span>第二项</span><br><span class="line"><span class="bullet">* </span>第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>第一项</span><br><span class="line"><span class="bullet">+ </span>第二项</span><br><span class="line"><span class="bullet">+ </span>第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一项</span><br><span class="line"><span class="bullet">- </span>第二项</span><br><span class="line"><span class="bullet">- </span>第三项</span><br></pre></td></tr></table></figure><p>显示如下：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h3 id="3-列表嵌套"><a href="#3-列表嵌套" class="headerlink" title="3.列表嵌套"></a>3.列表嵌套</h3><p>列表嵌套只需在子列表中的选项添加四个空格</p><h2 id="五、插入代码"><a href="#五、插入代码" class="headerlink" title="五、插入代码"></a>五、插入代码</h2><h3 id="1-片段代码"><a href="#1-片段代码" class="headerlink" title="1.片段代码"></a>1.片段代码</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：</p><p><code>printf(&quot;hello world&quot;)</code>函数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`printf("hello world")`</span> 函数</span><br></pre></td></tr></table></figure><h3 id="2-区块代码"><a href="#2-区块代码" class="headerlink" title="2.区块代码"></a>2.区块代码</h3><p>（1）代码区块可以使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。(需要在源代码模式下)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf()</span><br></pre></td></tr></table></figure><p>（2）你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```</span>markdown</span><br><span class="line"><span class="code">printf()</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 六、超链接</span><br><span class="line"></span><br><span class="line">### 链接有两种使用方式：</span><br><span class="line"></span><br><span class="line">（1）显示文字的超链接 </span><br><span class="line"></span><br><span class="line">[百度](www.baidu.com) </span><br><span class="line"></span><br><span class="line">（2）直接显示网址的超链接</span><br><span class="line"></span><br><span class="line">&lt;www.baidu.com&gt;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;markdown</span><br><span class="line">[链接名称](链接地址) </span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><p>插入图片用以下方式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 "可选标题"</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure><p>1.开头一个感叹号 !</p><p>2.接着一个方括号，里面放上图片的替代文字</p><p>3.接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><p>注：Markdown 还没有办法指定图片的高度与宽度，如果需要可以使用 &lt; img &gt; 标签。</p><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><h3 id="1-定义表格"><a href="#1-定义表格" class="headerlink" title="1.定义表格"></a>1.定义表格</h3><p>markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th>性别</th></tr></thead><tbody><tr><td>张三</td><td>男</td></tr><tr><td>李四</td><td>女</td></tr></tbody></table><h3 id="2-表格对齐方式"><a href="#2-表格对齐方式" class="headerlink" title="2.表格对齐方式"></a>2.表格对齐方式</h3><p><strong>-:</strong> 设置内容和标题栏居右对齐。</p><p><strong>:-</strong> 设置内容和标题栏居左对齐。</p><p><strong>:-:</strong> 设置内容和标题栏居中对齐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">姓名</th><th align="right">性别</th><th align="center">年龄</th></tr></thead><tbody><tr><td align="left">张三</td><td align="right">男</td><td align="center">22</td></tr><tr><td align="left">李四</td><td align="right">女</td><td align="center">20</td></tr></tbody></table><h1 id="九、快捷键"><a href="#九、快捷键" class="headerlink" title="九、快捷键"></a>九、快捷键</h1><ol><li><p>Ctrl + 1（1至6）：可以快捷设置（1-6）级标题</p></li><li><p>Ctrl + / ：切换源代码模式</p></li><li><p>Ctrl + Q：引用，如果你要引用他人的名言可以用引用,有些编辑软件为了避免快捷键冲突可能是 Ctrl+shift+q</p><blockquote><p>这是引用</p></blockquote></li><li><p>Ctrl + I ：斜体</p><p><em>斜体</em></p></li><li><p>Ctrl + B：字体加粗</p><p><strong>加粗</strong></p></li><li><p>Ctrl + G ：插入图片</p></li><li><p>Ctrl + H：提升标题</p></li><li><p>Ctrl + K：插入行内代码</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">title</a>代码为下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">title</span>](<span class="link">http://www.baidu.com</span>)</span><br></pre></td></tr></table></figure></li><li><p>Ctrl + Shift + K：插入代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        title</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>Ctrl + O：有序列表</p><ol start="11"><li>有序1</li><li>有序2</li></ol></li><li><p>Ctrl + U：无序列表</p><ul><li>无序1</li><li>无序2</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown基本语法&quot;&gt;&lt;a href=&quot;#Markdown基本语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown基本语法&quot;&gt;&lt;/a&gt;Markdown基本语法&lt;/h1&gt;&lt;p&gt;Markdown是一种纯文本格式的标记语言。通过简单的标记语
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://gitee.com/pcguo999/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://gitee.com/pcguo999/tags/Markdown/"/>
    
  </entry>
  
</feed>
